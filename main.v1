#include <iostream>
#include <conio.h>
using namespace std;

bool gameOver;
const int widht = 20;
const int height = 20;
int x, y, fruitX, fruitY, score;
int tailX[100], tailY[100];
int nTail;
enum eDirection {STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirection dir;


void Setup() {                      
	gameOver = false;
	dir = STOP;
// setting the initial coordinates
	x = widht / 2 - 1;
	y = height / 2 - 1;
	fruitX = rand() % widht;
	fruitY = rand() % height;
	score = 0;
}

void Draw() {									// map rendering
	system("cls");

	for (int i = 0; i < widht + 1; i++)	        // upper bound
		cout << "#";
	cout << endl;

	for (int i = 0; i < height; i++) {          // drawing of a snake,
		for (int j = 0; j < widht; j++) {       // fruit, voids, side borders
			if (j == 0 || j == widht - 1 )
				cout << "#";
			if (i == y && j == x)
				cout << "0";
			else if (i == fruitY && j == fruitX)
				cout << "F";
			else {
				bool print = false;
				for (int k = 0; k < nTail; k++) {
					if (tailX[k] == j && tailY[k] == i) {
						print = true;
						cout << "o";
					}
				}
				if (!print)
					cout << " ";
			}
				
		}
		cout << endl;
	}

	for (int i = 0; i < widht + 1; i++)         // lower bound
		cout << "#";
	cout << endl;
	cout << "Score: " << score << endl;
}

void Input() {                                  // reading direction keys
	if (_kbhit()) {
		switch (_getch())
		{
		case 'a':
			dir = LEFT;
			break;
		case 'w':
			dir = UP;
			break;
		case 'd':
			dir = RIGHT;
			break;
		case 's':
			dir = DOWN;
			break;
		case 'x':
			gameOver = true;
			break;
		}
	}
}

void Logic() {
	int prevX = tailX[0];
	int prevY = tailY[0];
	int prev2X, prev2Y;
	tailX[0] = x;
	tailY[0
	] = y;
	for (int i = 1; i < nTail; i++) {           // tail treatment
		prev2X = tailX[i];
		prev2Y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2X;
		prevY = prev2Y;
	}
	switch (dir)                                // moving snake
	{
	case LEFT:
		x--;
		break;
	case UP:
		y--;
		break;
	case RIGHT:
		x++;
		break;
	case DOWN:
		y++;
		break;
	}

//the condition under which the game ends when crossing the border		
//if (x > widht || x < 0 || y > height || y < 0)   
//	gameOver = true;
	
	if (x >= widht)                             // snake transfer to the opposite side
		x = 0;
	else if (x < 0)
		x = widht - 2;

	if (y >= height)
		y = 0;
	else if (y < 0)
		y = height - 1;

	for (int i = 0; i < nTail; i++) {           // tail eating test
		if (tailX[i] == x && tailY[i] == y)
			gameOver = true;
	}

	if (x == fruitX && y == fruitY) {           // eating and drawing fruit
		score += 10;
		fruitX = rand() % widht;
		fruitY = rand() % height;
		nTail++;
	}
}

int main() {
	Setup();                                    // starting initial configurations
	while (!gameOver) {
		Draw();
		Input();
		Logic();
		if (gameOver){
			system("cls");
			cout << "##    ##    ####    ##    ##        ##          ####       ####     #######" << endl;
			cout << " ##  ##    ##  ##   ##    ##        ##         ##  ##     #   ##    #      " << endl;
			cout << "  ####    ##    ##  ##    ##        ##        ##    ##     ##       #######" << endl;
			cout << "   ##     ##    ##  ##    ##        ##        ##    ##       ##     #######" << endl;
			cout << "   ##      ##  ##   ##    ##        ##    #    ##  ##     ##   #    #      " << endl;
			cout << "   ##       ####     ######         #######     ####       ####     #######" << endl;
			cout << endl;
			cout << "Score: " << score << endl;
			cout << endl;
		}
	}

	return 0;
}
